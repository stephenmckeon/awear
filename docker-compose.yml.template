version: "3.7"
services:
  # This is the name of the container
  # we'll connect to to run commands
  REPO:
    image: ACCOUNT/REPO:TAG
    # This says to basically start up the container
    # and do nothing, since we know we're
    # going to connect to it from our computer
    entrypoint: "tail -f /dev/null"
    # This maps the port we've exposed from inside
    # the Docker container to the given local
    # port on our host, i.e. requests to our
    # localhost for LOCAL_PORT will be served
    # by whatever is running in the container on EXPOSE
    ports:
      - "LOCAL_PORT:EXPOSE"
    # This maps the WORKDIR directory inside the Docker
    # container to our hosts directory, VOLUME_SOURCE
    # which is what allows us to share files between
    # our computer and the Docker container.
    #
    # The "delegated" consistency should make disk access faster
    # on macOS. This will cache reads and writes making the container
    # authoritative, so your computer will be behind, but not by much
    #
    # The second volume is our dependencies-cache as mentioned in the Dockerfile
    volumes:
      - type: bind
        source: "VOLUME_SOURCE"
        target: "WORKDIR"
        consistency: "delegated"
      - type: volume
        target: /usr/dependencies-cache
  # This creates a SECOND container
  # called "db" that will run Postgres.
  # This value here (db) will be the name
  # of the computer from the perspective of
  # the other Docker container, meaning
  # if we want to make a DB connection
  # to the Postgres running here, we'd
  # use the hostname db to do it
  db:
    # This is the name of the image
    # to run, and in this case, the image
    # will be fetched from DockerHub.
    # If you go to https://hub.docker.com/_/postgres
    # You can see how this works.
    # The "postgres" part tells Docker
    # to look in the postgres "docker repo".
    #
    # The 12 part is the "tag" inside that 
    # repo, representing the image to fetch.
    # Fortunately, it's the same as the version
    # of Postgres we want.
    #
    # If you scroll down to the section titled
    # "Supported tagsâ€¦", you'll see
    # the 12 tag and you can click through
    # to see the Dockerfile that built the image.
    #
    # Lastly, if you scroll down to the part 
    # titled "Environment Variables", you
    # can see the default values for
    # connecting to postgres.
    image: postgres:12
    # In Postgres 12, there is no default value for the password.
    # Since we're using this for dev, we need to set it
    # and it doesn't matter if it's 'secure', so we'll use
    # "postgres" as the password
    environment:
      POSTGRES_PASSWORD: postgres
  # Here, we set up Redis which we don't need to use in the book
  # until we start talking about background jobs.  Like the
  # Postgres block above, this starts up a Redis server using 5.x.x
  redis:
    image: redis:5
# vim: ft=yaml nospell
