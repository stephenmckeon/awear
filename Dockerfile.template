# This line says which base image we are building off of.
# In this case, it's an Ubuntu 20.04 image running Linux
FROM amd64/ubuntu:20.04

# This sets the environment variable DEBIAN_FRONTEND that
# all subsequent commands will see in their environments.
# This particular variable tells the `apt-get` command
# to run in a non-iteractive way, so we don't have to provide
# user input when using `apt-get`
ENV DEBIAN_FRONTEND noninteractive

# RUN does a few things.  First, it runs the command given to it inside the container
# being built that will result in the image.  Second, however, it creates
# a "layer", which is essentially a cache of the current state of the image being
# built.  That means, if we change something AFTER this RUN directive, this
# directive won't be re-executed—docker will pull the layer from a cache.
#
# This particular RUN directive is first because of what it does. It sets up
# the system software that's needed for everything else.  apt-get update
# refreshes the local cache of what software is available to install
# and then apt-get install pulls down packages and installs them.
RUN apt-get update -q && apt-get install -qy \
                            autoconf\
                            bison\
                            build-essential\
                            curl \
                            g++ \
                            gcc \
                            git \
                            gnupg2 \
                            libffi-dev \
                            libgconf-2-4 \
                            libgdbm-dev \
                            libncurses5-dev \
                            libpq-dev \
                            libreadline-dev \
                            libsqlite3-dev \
                            libssl-dev \
                            libxi6 \
                            libyaml-dev \
                            make \
                            man \
                            netcat \
                            rsync \
                            software-properties-common\
                            sqlite3 \
                            tzdata \
                            wget \
                            xvfb \
                            zip \
                            zlib1g-dev

# In order to use Postgres 12, we have to add their package repo to install it from there.
RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" |tee  /etc/apt/sources.list.d/pgdg.list && apt-get update && apt-get install -y postgresql-client-12


# Here, we set up NodeJS, per their instructions. Yes, piping
# random websites into bash is a bit scary, from a security
# persecptive, but a) this is only setting up a dev envrionment, and
# b) if `nodesource.com` has been taken over, you have bigger problems
# than following along with my book
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - && apt-get install -y nodejs

# Here, we set up Yarn, per their instructions. We'll
# also creat the dependencies-cache folder which will
# later be a volume to hold dependencies we download here
RUN mkdir /usr/dependencies-cache && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list && apt update && apt install -y yarn && yarn config set cache-folder /usr/dependencies-cache/yarn

# This sets up a variable we can refer to later.  Because
# we have to know the ruby-install version in so many places,
# we set it once here.
# https://github.com/postmodern/ruby-install
ARG ruby_installer_version=0.8.2

# This sets up ruby-install, which we will then use to install Ruby.  This is
# taken from the ruby-install GitHub page and is trying to make sure
# that what we'e downloaded matches what the maintainers have created.
RUN wget -O ruby-install-${ruby_installer_version}.tar.gz https://github.com/postmodern/ruby-install/archive/v${ruby_installer_version}.tar.gz && \
    wget https://raw.github.com/postmodern/postmodern.github.io/master/postmodern.asc && \
    gpg --import postmodern.asc && \
    wget https://raw.github.com/postmodern/ruby-install/master/pkg/ruby-install-${ruby_installer_version}.tar.gz.asc && \
    gpg --verify ruby-install-${ruby_installer_version}.tar.gz.asc ruby-install-${ruby_installer_version}.tar.gz && \
    tar -xzvf ruby-install-${ruby_installer_version}.tar.gz && \
    cd ruby-install-${ruby_installer_version}/ && \
    make install

# This actually installs Ruby, and installs 3.1.0
# This is a separate run command because we might
# want to change Ruby versions locally, but we *don't* what to have
# to re-download and install ruby-install if we can help it.
RUN ruby-install --system ruby 3.1.0

# OMG SO. MANY. DEPRECATION. WARNINGS. I. DO. NOT. CARE.
ENV RUBYOPT=-W:no-deprecated

# We need to install bundler explicitly, since the version
# that comes with Ubuntu is pretty out of date
RUN gem install bundler && bundle config path /usr/dependencies-cache/bundler

# This configures RubyGems to not install documentation,
# which will speed up gem installs. It also sets vi mode
# for bash (I'm a vim person so I need this :), and finally
# installs Rails.
#
# The reason we install Rails in the Dockerfile is because we need
# it to run the rails CLI to do rails new, and we don't want to
# have to always do that every time we restart our container.
#
# While we're doing that, we might as well create a new rails app and bundle
# install it so we get the base gems inside this docker file
RUN echo "gem: --no-document" >> ~/.gemrc && echo "set -o vi" >> ~/.bashrc && gem install rails --version ">= 6.1" && cd /usr/dependencies-cache && rails new empty-rails-app --force --database=postgresql --skip-webpack-install --skip-bundle && cd empty-rails-app && bundle update


# This sets up the locale to be American English, using
# a UTF-8 encoding.  By default, Ubuntu uses a "posix"
# encoding, which is woefully tied to ASCII and
# creates annoying problems later.
#
# This should not have any bearing on the
# localization or internationalization of your
# Rails app.
RUN apt-get -y update && \
    apt-get install locales && locale -a && \
    locale-gen en_US.UTF-8 && locale -a && \
    update-locale LANG=en_US.utf8 && \
    dpkg-reconfigure locales

ENV LANG=en_US.utf8

# This downloads chrome and chromedriver.  This is fraught with implicit
# nonsense because you cannot specify the version of Chrome to download, however
# you MUST specify the version of chromedriver and they both MUST match.
#
# To update this:
#
# 1. Go to The Internet and figure out what is the latest version of Chrome.
#    This is presumably/hopefully/possibly what will be installed by
#
#       apt-get -y install google-chrome-stable
#
#    in the below code
#
# 2. Now, go to https://chromedriver.chromium.org and figure out
#    which version of chromedriver goes with the latest version of Chrome.
#    Copy that version string below in the wget invocation.
#
# 3. Cross your fingers!
RUN curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | \
    apt-key add - && \
    echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | \
    tee  /etc/apt/sources.list.d/google-chrome.list && \
    apt-get -y update && \
    apt-get -y install google-chrome-stable && \
    wget https://chromedriver.storage.googleapis.com/92.0.4515.107/chromedriver_linux64.zip && \
    unzip chromedriver_linux64.zip && \
    mv chromedriver /usr/bin/chromedriver && \
    chown root:root /usr/bin/chromedriver && \
    chmod +x /usr/bin/chromedriver

# Ruby and Rails result in a lot of deprecation warnings.
# These are annoying and we don't want to see them right now.
# I know I sent ENV above, but it doesn't seem to work, and TBH
# this doesn't actually work unless you remember to make bash a login
# shell.  No idea why.
RUN echo "RUBYOPT=-W:no-deprecated" >> /etc/environment &&  echo "export RUBYOPT=-W:no-deprecated" >> ~/.profile

# This creates disk space that survives between container restarts.
# This volume is for storing RubyGems and Node modules so that we
# don't have to bundle install or yarn install every single time we
# restart the docker container.
VOLUME /usr/dependencies-cache

WORKDIR «value WORKDIR from bin/vars»

# This says to expose the given port to the outside world.
EXPOSE «value EXPOSE from bin/vars»

# vim: ft=Dockerfile
